// Import the authentication functionality from Clerk
import { auth } from "@clerk/nextjs/server";
// Import the redirect function to handle navigation
import { redirect } from "next/navigation";
// Import the Id type from our Convex data model for type safety
import { Id } from "../../../../../convex/_generated/dataModel";
// Import our API endpoints generated by Convex
import { api } from "../../../../../convex/_generated/api";
// Import our custom function to get a Convex client instance
import { getConvexClient } from "@/lib/convex";
import ChatInterface from "@/components/ui/ChatInterface";

// Define the structure of props that this page component will receive
// The chatId is passed as a URL parameter and is of type Id<"chats">
interface ChatPageProps {
  params: Promise<{
    chatId: Id<"chats">;
  }>;
}

// Define the main page component that receives the chat ID as a parameter
async function ChatPage({ params }: ChatPageProps) {
  // Extract the chatId from the params promise
  const { chatId } = await params;

  // Get the current user's ID using Clerk authentication
  const { userId } = await auth();
  // If no user is logged in, redirect them to the home page
  if (!userId) {
    redirect("/");
  }

  try {
    // Create a new instance of the Convex client to interact with our backend
    const convex = getConvexClient();

    // Fetch all messages for this chat using the chatId
    const initialMessages = await convex.query(api.messages.list, { chatId });
    return (
        <div className="flex-1 overflow-hidden">
            <ChatInterface chatId={chatId} initialMessages={initialMessages} />
        </div>
    );
  } catch (error) {
    console.error("Error fetching messages:", error);
    return <div>Error fetching messages</div>;
    redirect("/dashboard");
  }

  // Render a simple div showing the chat ID (placeholder UI)
}

// Export the ChatPage component as the default export
export default ChatPage;
